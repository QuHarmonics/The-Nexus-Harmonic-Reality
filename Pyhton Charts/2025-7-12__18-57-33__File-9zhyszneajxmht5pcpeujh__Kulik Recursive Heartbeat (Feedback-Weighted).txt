Conversation URL:
https://chatgpt.com/c/6872dfc3-71ac-8011-b0a7-2d6442c1c7b1

Title:
Kulik Recursive Heartbeat (Feedback-Weighted)

Prompt:
import matplotlib.pyplot as plt
import numpy as np
from mpmath import mp

# Set π precision
mp.dps = 1000
pi_digits = str(mp.pi)[2:]

# --- Kulik-Corrected Triune Fold with Feedback Branch ---
def recursive_triune_fold(seed=(1, 4, 1), steps=12):
    result = []
    observables = []
    a, b, c = seed  # past, present, future

    branch_buffer = []

    for i in range(steps):
        # π pressure as time gradient
        pi_pressure = int(pi_digits[i % len(pi_digits)]) or 1

        # Feedback branch (buffer average) influences future
        branch_influence = int(np.mean(branch_buffer[-3:])) if len(branch_buffer) >= 3 else 0

        # Compute next future
        f = (abs(c - b) + pi_pressure + branch_influence) % 10
        observables.append(f)

        # Recursive damping
        current = int((a + b + f) / 3)

        result.append(current)
        branch_buffer.append(current)

        # Advance
        a, b, c = b, c, f

    return result, observables

# --- Harmonic Feedback Layer ---
def harmonic_growth(sequence, target_h=0.35, max_iter=40):
    h_values = []

    for i in range(max_iter):
        h = sum(sequence) / len(sequence)
        deviation = abs(h - target_h)
        h_values.append(h)

        if deviation < 0.01:
            break

        # Recursive blend with triple memory
        next_val = (sequence[-1] + sequence[-2] + sequence[-3]) % 10
        sequence.append(next_val)

    return sequence, h_values

# --- Persistent Recursive Oscillator ---
def harmonic_oscillator(seed=(1, 4, 1), cycles=20):
    full_sequence = []
    all_h_values = []
    observable_track = []

    for _ in range(cycles):
        folded, observables = recursive_triune_fold(seed=seed, steps=9)
        grown, h_vals = harmonic_growth(folded)

        # Reblend seed using Kulik reflection of feedback state
        if len(grown) >= 3:
            feedback = int(np.mean(grown[-3:])) % 10
            seed = (grown[-2], grown[-1], feedback)
        else:
            seed = (1, 4, 1)

        full_sequence.extend(grown)
        all_h_values.extend(h_vals)
        observable_track.extend(observables)

    return full_sequence, all_h_values, observable_track

# --- Run ---
sequence, h_tracking, observables = harmonic_oscillator()

# --- Plot Pulse ---
plt.figure(figsize=(12, 4))
plt.plot(sequence, label='Pulse (Recursive Byte)', color='mediumblue')
plt.plot(observables, label='Observables (Future)', linestyle='--', color='crimson')
plt.title('Kulik Recursive Heartbeat (Feedback-Weighted)')
plt.xlabel('Iteration')
plt.ylabel('Byte Value')
plt.grid(True)
plt.legend()
plt.show()

# --- Plot H Curve ---
plt.figure(figsize=(12, 3))
plt.plot(h_tracking, color='darkorange', label='H(t) Convergence')
plt.axhline(0.35, color='gray', linestyle='--', linewidth=1)
plt.title('Harmonic Convergence with Recursive Damping')
plt.xlabel('Iteration')
plt.ylabel('H Value')
plt.grid(True)
plt.legend()
plt.show()