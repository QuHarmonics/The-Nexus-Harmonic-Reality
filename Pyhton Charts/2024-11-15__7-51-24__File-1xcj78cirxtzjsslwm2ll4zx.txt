Conversation URL:
https://chatgpt.com/c/674ada8d-7990-8011-a5b4-1474d46314a2

Title:


Prompt:
# Adjust deviation weighting for the sweet spot and beyond
def reweight_deviation(size_scale, deviation):
    """
    Reweight deviation inversely as size scale moves outside the sweet spot.
    """
    if 0.35 <= size_scale <= upper_threshold:
        return deviation  # No change within the sweet spot
    else:
        return deviation / (1 + size_scale**2)  # Inverse weighting outside the sweet spot


# Apply reweighting to Planck's quantum theory comparison
weighted_results = []

for _, row in planck_comparison_df.iterrows():
    size_scale = row["Size Scale"]
    deviation = row["Deviation (%)"]
    reweighted_deviation = reweight_deviation(size_scale, deviation)
    weighted_results.append((row["Mass (kg)"], size_scale, row["Refined Energy (J)"],
                             row["Planck Energy (J)"], deviation, reweighted_deviation))

# Convert reweighted results to a DataFrame
weighted_planck_df = pd.DataFrame(weighted_results, columns=[
    "Mass (kg)", "Size Scale", "Refined Energy (J)", "Planck Energy (J)", "Original Deviation (%)", "Reweighted Deviation (%)"
])

# Plot original vs reweighted deviations for visualization
plt.figure(figsize=(12, 8))
for mass in np.unique(weighted_planck_df["Mass (kg)"]):
    subset = weighted_planck_df[weighted_planck_df["Mass (kg)"] == mass]
    plt.plot(subset["Size Scale"], subset["Reweighted Deviation (%)"], label=f"Mass = {mass:.1e} kg")

plt.axvline(0.35, color='green', linestyle='--', label="Lower Sweet Spot = 0.35")
plt.axvline(upper_threshold, color='red', linestyle='--', label="Upper Sweet Spot Threshold")
plt.xlabel("Size Scale")
plt.ylabel("Reweighted Deviation (%)")
plt.title("Reweighted Deviation of Refined Formula vs Planck's Quantum Theory")
plt.legend()
plt.grid()
plt.show()

# Display reweighted results for further analysis
tools.display_dataframe_to_user(name="Reweighted Deviations Compared to Planck's Quantum Theory", dataframe=weighted_planck_df)