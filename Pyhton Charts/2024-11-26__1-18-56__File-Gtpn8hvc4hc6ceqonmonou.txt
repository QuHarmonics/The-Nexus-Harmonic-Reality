Conversation URL:
https://chatgpt.com/c/674ada8e-6ee8-8011-bad6-30248ce2e5af

Title:


Prompt:
# Generate a tree-style 3D visualization
def add_tree_edges_3d(graph, parent, children, depth=0, angle=0, pos=None, branch_angle=30, depth_increment=1):
    if pos is None:
        pos = {}
    if parent not in pos:
        pos[parent] = (depth, angle, 0)
    for i, child in enumerate(children):
        branch_shift = (i - len(children) / 2) * branch_angle
        if isinstance(children[child], list):  # Base methods
            for j, method in enumerate(children[child]):
                method_angle = angle + branch_shift + j * (branch_angle / len(children[child]))
                graph.add_edge(parent, method)
                pos[method] = (depth + depth_increment, method_angle, depth_increment)
        elif isinstance(children[child], dict):  # Subcategories
            child_angle = angle + branch_shift
            graph.add_edge(parent, child)
            pos[child] = (depth + depth_increment, child_angle, depth_increment)
            add_tree_edges_3d(graph, child, children[child], depth + depth_increment, child_angle, pos, branch_angle / 1.5, depth_increment)
    return pos

# Build the tree-style 3D graph
graph_tree_3d = nx.DiGraph()
pos_tree_3d = add_tree_edges_3d(graph_tree_3d, "Interfaces", interfaces_structure["Interfaces"], depth_increment=1.5)

# Extract positions for 3D plotting
x_tree, y_tree, z_tree = zip(*[pos for node, pos in pos_tree_3d.items()])

# Map positions to nodes for plotting
node_positions_tree_3d = {node: (x_tree[i], y_tree[i], z_tree[i]) for i, node in enumerate(pos_tree_3d)}

# Create a 3D plot for the tree-style structure
fig = plt.figure(figsize=(16, 12))
ax = fig.add_subplot(111, projection='3d')

# Draw edges
for edge in graph_tree_3d.edges:
    x_vals = [node_positions_tree_3d[edge[0]][0], node_positions_tree_3d[edge[1]][0]]
    y_vals = [node_positions_tree_3d[edge[0]][1], node_positions_tree_3d[edge[1]][1]]
    z_vals = [node_positions_tree_3d[edge[0]][2], node_positions_tree_3d[edge[1]][2]]
    ax.plot(x_vals, y_vals, z_vals, 'gray')

# Draw nodes
ax.scatter(x_tree, y_tree, z_tree, c='lightblue', s=100)

# Annotate nodes
for node, (x_coord, y_coord, z_coord) in node_positions_tree_3d.items():
    ax.text(x_coord, y_coord, z_coord, node, fontsize=8, color='black')

# Set plot labels and title
ax.set_title("Tree-Style 3D Interface Visualization for Universe 000", fontsize=16)
ax.set_xlabel("Depth")
ax.set_ylabel("Angle")
ax.set_zlabel("Branch Level")

plt.show()