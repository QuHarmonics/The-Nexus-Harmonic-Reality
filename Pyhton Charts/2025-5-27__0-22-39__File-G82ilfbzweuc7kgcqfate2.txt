Conversation URL:
https://chatgpt.com/c/682a5892-2c7c-8011-a737-4ebd82cab035

Title:


Prompt:
from typing import List, Tuple
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Collapse function
def delta_collapse(data: List[int]) -> List[List[int]]:
    history = [data[:]]
    current = data[:]
    while len(current) > 1:
        next_stage = [abs(current[i + 1] - current[i]) for i in range(len(current) - 1)]
        history.append(next_stage)
        if next_stage == current:
            break
        current = next_stage
    return history

# Visualize the triangle
def plot_collapse_triangle(collapse_steps: List[List[int]]):
    fig, ax = plt.subplots(figsize=(12, 8))
    for step_idx, step in enumerate(collapse_steps):
        x = np.arange(len(step))
        y = np.full_like(x, step_idx)
        ax.scatter(x, y, c=step, cmap='viridis', s=100, edgecolors='k')
        for i, val in enumerate(step):
            ax.text(x[i], y[i], str(val), ha='center', va='center', color='white')
    ax.invert_yaxis()
    ax.set_title("Recursive Delta Collapse Triangle")
    ax.set_xlabel("Index")
    ax.set_ylabel("Collapse Step")
    plt.grid(True)
    plt.tight_layout()
    return fig

# Compression: store seed and number of steps
def compress_to_seed(data: List[int]) -> Tuple[str, int]:
    collapse = delta_collapse(data)
    if len(collapse) > 1:
        triplet = collapse[-2][:3] if len(collapse[-2]) >= 3 else collapse[-1] + [0] * (3 - len(collapse[-1]))
    else:
        triplet = data[:3]
    seed = ''.join(str(min(1, x)) for x in triplet)  # Normalize to binary representation
    return seed, len(collapse)

# Decompression (Placeholder Logic)
def decompress_from_seed(seed: str, depth: int) -> List[int]:
    # This reconstruction assumes a naive expansion for demonstration
    base = [int(b) for b in seed]
    result = base[:]
    for _ in range(depth - 2):  # Subtracting base seed level
        result = [result[0]] + [result[i] + result[i-1] for i in range(1, len(result))]
    return result[:depth+1]

# Example Input
input_data = [3, 3, 3, 1, 6, 6, 3, 8, 6, 1, 3]

# Run all phases
collapse_output = delta_collapse(input_data)
collapse_df = pd.DataFrame([r + [None]*(len(input_data)-len(r)) for r in collapse_output])
fig = plot_collapse_triangle(collapse_output)
seed, depth = compress_to_seed(input_data)
decompressed = decompress_from_seed(seed, depth)

import ace_tools as tools; tools.display_dataframe_to_user(name="Delta Collapse Table", dataframe=collapse_df)

seed, depth, decompressed[:20]  # Return core compression/decompression result