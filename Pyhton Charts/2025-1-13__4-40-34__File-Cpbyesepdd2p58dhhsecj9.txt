Conversation URL:
https://chatgpt.com/c/6783e51d-5e68-8011-b329-8a8024db41fb

Title:


Prompt:
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

def generate_vertices(center, radius, sides):
    """
    Generate vertices for a regular n-sided polygon in 3D space.

    Args:
        center (tuple): Center of the shape (cx, cy, cz).
        radius (float): Radius of the shape (distance from center to vertex).
        sides (int): Number of sides for the polygon.

    Returns:
        np.array: Vertices of the polygon in 3D.
    """
    cx, cy, cz = center
    vertices = []
    for i in range(sides):
        angle = 2 * np.pi * i / sides  # Angle for each vertex
        x = cx + radius * np.cos(angle)
        y = cy + radius * np.sin(angle)
        z = cz  # Flat in the XY plane for now
        vertices.append([x, y, z])
    return np.array(vertices)


def recursive_shapes(center, seed_radius, recursion_depth, sides):
    """
    Generate recursive shapes centered at the origin.

    Args:
        center (tuple): Center of the shape (0, 0, 0).
        seed_radius (float): Initial radius of the shape.
        recursion_depth (int): Number of recursive steps.
        sides (int): Number of sides for the polygon.

    Returns:
        list: List of shape data (vertices and radius).
    """
    shapes = []
    radius = seed_radius

    for _ in range(recursion_depth):
        vertices = generate_vertices(center, radius, sides)
        shapes.append({"vertices": vertices, "radius": radius, "sides": sides})
        radius *= 2  # Double the radius at each recursion

    return shapes


def plot_recursive_shapes(shapes, center):
    """
    Plot recursively generated shapes in 3D.

    Args:
        shapes (list): List of shape data (vertices and radius).
        center (tuple): Center of all shapes (0, 0, 0).
    """
    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection="3d")

    def plot_shape(ax, vertices, radius, color, alpha, label):
        """
        Plot a single shape in 3D.

        Args:
            ax: Matplotlib 3D axis.
            vertices (np.array): Vertices of the shape.
            radius (float): Radius of the shape.
            color (str): Color of the shape.
            alpha (float): Transparency of the shape.
            label (str): Label for the shape.
        """
        # Draw the faces of the shape (assume planar polygon for now)
        poly = Poly3DCollection([vertices], color=color, alpha=alpha, edgecolor="k")
        ax.add_collection3d(poly)
        ax.text(center[0], center[1], center[2] + radius, label, color=color)

    colors = ['red', 'blue', 'green', 'purple', 'orange']
    alpha_values = [0.4, 0.3, 0.2, 0.1, 0.05]

    for i, shape in enumerate(shapes):
        vertices = shape["vertices"]
        radius = shape["radius"]
        color = colors[i % len(colors)]
        alpha = alpha_values[i % len(alpha_values)]
        plot_shape(ax, vertices, radius, color, alpha, label=f"Shape {i + 1}")

    max_radius = max([shape["radius"] for shape in shapes])
    ax.set_xlim(-max_radius, max_radius)
    ax.set_ylim(-max_radius, max_radius)
    ax.set_zlim(-max_radius, max_radius)
    ax.set_xlabel("X-axis")
    ax.set_ylabel("Y-axis")
    ax.set_zlabel("Z-axis")
    ax.set_title("Recursive Shapes Grown from (0,0,0)")
    plt.show()


# Parameters
center = (0, 0, 0)  # Constant center point
seed_radius = 128  # Initial radius
recursion_depth = 3  # Depth of recursion
sides = 6  # Number of sides (hexagon)

# Generate recursive shapes
shapes = recursive_shapes(center, seed_radius, recursion_depth, sides)

# Plot the recursive shapes
plot_recursive_shapes(shapes, center)