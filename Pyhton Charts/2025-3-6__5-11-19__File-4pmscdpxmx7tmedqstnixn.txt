Conversation URL:
https://chatgpt.com/c/67c1a60d-a910-8011-81fb-bb809464311a

Title:


Prompt:
from mpmath import mp, nstr
from scipy.fft import fft
import seaborn as sns

# Set precision to 1000 digits of π
mp.dps = 1000  # Decimal places
pi_digits = nstr(mp.pi, 1002)[2:]  # Extract first 1000 digits (remove "3.")

# Convert π digits to numerical array
pi_numeric = np.array([int(digit) for digit in pi_digits])

# Compute Harmonic Spectrum using Discrete Fourier Transform
N = len(pi_numeric)
frequencies = np.fft.fftfreq(N)
harmonic_spectrum = fft(pi_numeric)

# Plot the Harmonic Spectrum
plt.figure(figsize=(12, 6))
plt.plot(np.abs(harmonic_spectrum[:N // 2]), label="Harmonic Spectrum of π Digits", color='b')
plt.xlabel("Frequency Index")
plt.ylabel("Magnitude")
plt.title("Harmonic Spectrum of the First 1000 Digits of π")
plt.legend()
plt.grid(True)
plt.show()

# Compute Rotational Symmetry Measure at Different Angles (0° to 180°)
angles = np.linspace(0, 180, 180)  # 0° to 180° range
rotation_symmetry = [np.sum(pi_numeric * np.roll(pi_numeric, int(angle))) for angle in angles]

# Plot Rotational Symmetry Measure
plt.figure(figsize=(12, 6))
plt.plot(angles, rotation_symmetry, label="Rotational Symmetry of π Digits", color='g')
plt.axvline(x=137.5, color='r', linestyle='--', label="Golden Angle (137.5°)")
plt.xlabel("Rotation Angle (°)")
plt.ylabel("Rotational Symmetry Measure")
plt.title("Rotational Symmetry Analysis of π's First 1000 Digits")
plt.legend()
plt.grid(True)
plt.show()

# Compute Multi-Scale Pattern Analysis (windowed sums every 10 digits)
window_size = 10
multi_scale_patterns = [np.sum(pi_numeric[i:i + window_size]) for i in range(0, N - window_size, window_size)]

# Plot Multi-Scale Pattern Analysis
plt.figure(figsize=(12, 6))
sns.histplot(multi_scale_patterns, bins=20, kde=True, color='purple', label="Multi-Scale Pattern Distribution")
plt.xlabel("Sum of 10-Digit Windows")
plt.ylabel("Frequency")
plt.title("Multi-Scale Pattern Analysis of π's Digits")
plt.legend()
plt.grid(True)
plt.show()

# Compute statistical measures of the analyses
harmonic_peaks = np.argmax(np.abs(harmonic_spectrum[:N // 2]))  # Highest peak in frequency spectrum
rotation_peak_angle = angles[np.argmax(rotation_symmetry)]  # Angle of strongest symmetry alignment
pattern_mean = np.mean(multi_scale_patterns)  # Mean of 10-digit window sums
pattern_std = np.std(multi_scale_patterns)  # Std deviation of sums

# Return key findings
harmonic_peaks, rotation_peak_angle, pattern_mean, pattern_std