Conversation URL:
https://chatgpt.com/c/6814a123-a51c-8011-a87a-fa6707246c06

Title:
Regression: Actual vs Predicted Suppression

Prompt:
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor, MLPClassifier
from sklearn.metrics import mean_squared_error, r2_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('/mnt/data/rgcl_phase1_dataset.csv')

# Filter for finite harmonic suppression ratio and in [0,1]
df_filtered = df[np.isfinite(df['G_loop_harmonic/G_Newton']) & 
                 (df['G_loop_harmonic/G_Newton'] >= 0) & 
                 (df['G_loop_harmonic/G_Newton'] <= 1)].copy()

# Features and targets
features = df_filtered[['m1', 'm2', 'r']].values
reg_target = df_filtered['G_loop_harmonic/G_Newton'].values
clf_target = df_filtered['Zone'].values

# Train-test split
X_train, X_test, y_train_reg, y_test_reg, y_train_clf, y_test_clf = train_test_split(
    features, reg_target, clf_target, test_size=0.2, random_state=42
)

# Regression model for suppression ratio
regressor = MLPRegressor(hidden_layer_sizes=(50,30), max_iter=1000, random_state=42)
regressor.fit(X_train, y_train_reg)
y_pred_reg = regressor.predict(X_test)

# Regression metrics
mse = mean_squared_error(y_test_reg, y_pred_reg)
r2 = r2_score(y_test_reg, y_pred_reg)

print("Regression Metrics:")
print(f"  MSE: {mse:.4f}")
print(f"  RÂ²:  {r2:.4f}\n")

# Classification model for zone
unique_classes = np.unique(y_train_clf)
if len(unique_classes) > 1:
    classifier = MLPClassifier(hidden_layer_sizes=(50,30), max_iter=1000, random_state=42)
    classifier.fit(X_train, y_train_clf)
    y_pred_clf = classifier.predict(X_test)
    print("Classification Report:")
    print(classification_report(y_test_clf, y_pred_clf))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test_clf, y_pred_clf))
else:
    print("Classification skipped: only one class present in training data.")

# Plot actual vs predicted suppression ratio
plt.figure(figsize=(6,6))
plt.scatter(y_test_reg, y_pred_reg, alpha=0.5)
plt.plot([0,1], [0,1], 'r--')
plt.xlabel('Actual G_loop_harmonic/G_Newton')
plt.ylabel('Predicted G_loop_harmonic/G_Newton')
plt.title('Regression: Actual vs Predicted Suppression')
plt.grid(True)
plt.tight_layout()
plt.show()