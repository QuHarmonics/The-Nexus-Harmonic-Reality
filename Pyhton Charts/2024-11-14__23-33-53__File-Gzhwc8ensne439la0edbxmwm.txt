Conversation URL:
https://chatgpt.com/c/674ada8d-7990-8011-a5b4-1474d46314a2

Title:


Prompt:
# 2. Run Quantum Probability Fields Simulation
def run_quantum_probability_fields_simulation(config):
    """Simulates quantum-like probability fields with 0.35 as a spread parameter."""
    positions = np.random.uniform(-config["spread"], config["spread"], (config["num_elements"], 2))
    field_intensities = np.zeros(config["num_elements"])

    for i in range(config["num_elements"]):
        influence_sum = 0
        for j in range(config["num_elements"]):
            if i != j:
                d = np.linalg.norm(positions[i] - positions[j])
                probability_density = config["interaction_scale"] * np.exp(-0.35 * (d / config["spread"]) ** 2)
                influence_sum += probability_density
        field_intensities[i] = influence_sum

    return field_intensities

quantum_field_intensities = run_quantum_probability_fields_simulation(simulations["Quantum Probability Fields"])

# Plot Quantum Probability Fields Simulation Results
plt.figure(figsize=(10, 6))
plt.hist(quantum_field_intensities, bins=20, alpha=0.75, color='b', label="Field Intensity Distribution")
plt.axvline(x=0.35, color='r', linestyle='--', label="0.35 Threshold")
plt.xlabel("Field Intensity")
plt.ylabel("Frequency")
plt.title("Quantum Probability Fields with 0.35 Spread")
plt.legend()
plt.show()

# 3. Run Self-Organizing Systems Simulation
def run_self_organizing_system_simulation(config):
    """Simulates a self-organizing grid with 0.35 as feedback scale for pattern stability."""
    grid = np.random.choice([0, 1], size=(config["grid_size"], config["grid_size"]), p=[0.7, 0.3])
    stable_patterns = []

    for step in range(config["steps"]):
        new_grid = grid.copy()
        for i in range(config["grid_size"]):
            for j in range(config["grid_size"]):
                neighborhood_sum = np.sum(grid[max(i-1, 0):min(i+2, config["grid_size"]), max(j-1, 0):min(j+2, config["grid_size"])])
                if neighborhood_sum / 9 >= config["feedback_scale"]:
                    new_grid[i, j] = 1
                else:
                    new_grid[i, j] = 0
        grid = new_grid
        stable_patterns.append(np.mean(grid))

    return stable_patterns

self_organizing_patterns = run_self_organizing_system_simulation(simulations["Self-Organizing Systems"])

# Plot Self-Organizing Systems Simulation Results
plt.figure(figsize=(10, 6))
plt.plot(self_organizing_patterns, label="Average Active Cells")
plt.axhline(y=0.35, color='r', linestyle='--', label="0.35 Threshold")
plt.xlabel("Time Step")
plt.ylabel("Average Active Cells")
plt.title("Self-Organizing System with 0.35 Feedback Scale")
plt.legend()
plt.show()