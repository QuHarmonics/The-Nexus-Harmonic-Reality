Conversation URL:
https://chatgpt.com/c/6801b0ab-6c40-8011-8d37-9e34d8a7b7c0

Title:


Prompt:
import hashlib, random, string, struct, math, matplotlib.pyplot as plt, pandas as pd, numpy as np, ace_tools as tools

def sha256_hex(msg: bytes) -> str:
    return hashlib.sha256(msg).hexdigest()

def digest_words(digest_hex: str):
    words = [int(digest_hex[i:i+8], 16) for i in range(0, 64, 8)]
    drifts = [(1<<32) - w for w in words]
    signed = [w - (1<<32) for w in words]
    return words, drifts, signed

# 1. Large random sample
SAMPLE_N = 2000
rand_strings = [''.join(random.choices(string.ascii_letters+string.digits, k=random.randint(5,20)))
                for _ in range(SAMPLE_N)]
all_drifts=[]
for s in rand_strings:
    all_drifts.extend(digest_words(sha256_hex(s.encode()))[1])

plt.figure(figsize=(6,4))
plt.hist(all_drifts, bins=60)
plt.title("Δ2^32 distribution – 2000 random strings")
plt.xlabel("drift (target − value)")
plt.ylabel("frequency")
plt.tight_layout()

# 2. Mirror pairs
PAIR_N = 500
pairs=[]
correlations=[]
for pid in range(PAIR_N):
    word = ''.join(random.choices(string.ascii_lowercase, k=random.randint(5,10)))
    mirror = word.capitalize()
    dA = np.array(digest_words(sha256_hex(word.encode()))[2])
    dB = np.array(digest_words(sha256_hex(mirror.encode()))[2])
    correlations.append(abs(np.corrcoef(dA, dB)[0,1]))
    pairs.append({"pair_id": pid, "word": word, **{f"signed{i}_lower": dA[i] for i in range(8)},
                  **{f"signed{i}_caps": dB[i] for i in range(8)}})

pair_df = pd.DataFrame(pairs)
tools.display_dataframe_to_user("Case‑flip pairs (first 10)", pair_df.head(10))
mean_corr = sum(correlations)/len(correlations)

plt.figure(figsize=(5,5))
plt.scatter(abs(pair_df['signed0_lower'][:100]), abs(pair_df['signed0_caps'][:100]))
plt.title("Word0 |signed drift| lower vs caps (first 100 pairs)")
plt.xlabel("|signed| lower")
plt.ylabel("|signed| caps")
plt.tight_layout()

# 3. Recursive feedback
INIT_MSG = b"1"
ITER = 20
rms_list=[]
msg = INIT_MSG
for i in range(ITER):
    digest = sha256_hex(msg)
    words, drifts, signed = digest_words(digest)
    rms_list.append(math.sqrt(sum(d*d for d in signed)/8))
    # feed unsigned words back as bytes
    msg = b"".join(struct.pack(">I", w) for w in words)

rec_df = pd.DataFrame({"iteration": range(1,ITER+1), "RMS_drift": rms_list})
tools.display_dataframe_to_user("Recursive SHA RMS drift", rec_df)

plt.figure(figsize=(6,4))
plt.plot(range(1,ITER+1), rms_list, marker='o')
plt.title("RMS(|signed drift|) over recursive SHA iteration")
plt.xlabel("iteration")
plt.ylabel("RMS drift")
plt.tight_layout()

print(f"Average correlation of signed‑drift vectors (lower vs caps): {mean_corr:.3f}")