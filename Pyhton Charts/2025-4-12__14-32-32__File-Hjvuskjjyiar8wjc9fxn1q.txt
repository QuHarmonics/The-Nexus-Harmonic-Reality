Conversation URL:
https://chatgpt.com/c/67f95edf-b4f0-8011-bf7d-1f0be7727312

Title:


Prompt:
import hashlib
import random
import matplotlib.pyplot as plt

# Constants
SHA_BYTES = 32  # 256-bit hash
SEED_BYTES = 32  # Match input length
HEX_DIGITS = "0123456789abcdef"

def sha256_bytes(data: bytes) -> bytes:
    return hashlib.sha256(data).digest()

def generate_seed(length=SEED_BYTES) -> bytearray:
    return bytearray(random.getrandbits(8) for _ in range(length))

def mirrored_match_score(seed, sha):
    return sum(1 for i in range(len(seed)) if seed[i] == sha[-1 - i])

def recursive_mirror(seed: bytearray, history=None, locked=None, depth=0):
    if history is None:
        history = []
    if locked is None:
        locked = set()

    state = sha256_bytes(seed)
    score = mirrored_match_score(seed, state)
    history.append((seed[:], state[:], score, depth))

    if score == len(seed):
        return seed, state, history

    mid = len(seed) // 2
    layers = [(mid - i, len(seed) - mid + i - 1) for i in range(mid + 1)
              if (mid - i) >= 0 and (len(seed) - mid + i - 1) < len(seed)]

    for i, j in layers:
        if i in locked:
            continue
        if seed[i] != state[-1 - i]:
            seed[i] = state[-1 - i]
            locked.add(i)
            return recursive_mirror(seed, history, locked, depth + 1)
        elif seed[j] != state[-1 - j]:
            seed[j] = state[-1 - j]
            locked.add(j)
            return recursive_mirror(seed, history, locked, depth + 1)

    return seed, state, history

# Start with a random seed
initial_seed = generate_seed(SEED_BYTES)

# Run recursive SHA reflection
final_seed, final_hash, evolution = recursive_mirror(initial_seed)

# Extract scores
scores = [step[2] for step in evolution]

# Plot match score evolution
plt.figure(figsize=(10, 4))
plt.plot(scores, marker='o', linestyle='-')
plt.title("SHA Mirror Recursive Convergence")
plt.xlabel("Recursive Step")
plt.ylabel("Mirrored Byte Match Score")
plt.grid(True)
plt.tight_layout()
plt.show()

final_seed.hex(), final_hash.hex(), len(evolution), scores[-1]