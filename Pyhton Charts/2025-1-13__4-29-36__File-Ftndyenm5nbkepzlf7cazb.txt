Conversation URL:
https://chatgpt.com/c/6783e51d-5e68-8011-b329-8a8024db41fb

Title:


Prompt:
def calculate_faces(vertices, sides):
    """
    Dynamically calculates the faces of a shape based on its vertices.

    Args:
        vertices (np.array): Vertices of the shape.
        sides (int): Number of sides for the shape (e.g., 4 for a cube).

    Returns:
        list: List of faces, where each face is defined by its vertices.
    """
    if sides == 4:  # Cube logic
        return [
            [vertices[i] for i in [0, 1, 2, 3]],  # Bottom face
            [vertices[i] for i in [4, 5, 6, 7]],  # Top face
            [vertices[i] for i in [0, 1, 5, 4]],  # Side face
            [vertices[i] for i in [2, 3, 7, 6]],  # Side face
            [vertices[i] for i in [1, 2, 6, 5]],  # Side face
            [vertices[i] for i in [0, 3, 7, 4]],  # Side face
        ]
    elif sides == 3:  # Tetrahedron logic
        return [
            [vertices[i] for i in [0, 1, 2]],  # Base face
            [vertices[i] for i in [0, 1, 3]],  # Side face
            [vertices[i] for i in [1, 2, 3]],  # Side face
            [vertices[i] for i in [0, 2, 3]],  # Side face
        ]
    else:
        raise ValueError(f"Unsupported shape with {sides} sides.")


def plot_recursive_shapes_generalized(shapes):
    """
    Visualizes recursive shapes using dynamically calculated faces.

    Args:
        shapes (list): List of shape data (size, center, sides).
    """
    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection="3d")

    def plot_single_shape(ax, vertices, faces, color, alpha, label):
        """
        Plots a single shape using its vertices and dynamically calculated faces.

        Args:
            ax: Matplotlib 3D axis.
            vertices (np.array): Vertices of the shape.
            faces (list): Faces of the shape defined by vertices.
            color (str): Color of the shape.
            alpha (float): Transparency of the shape.
            label (str): Label for the shape.
        """
        for face in faces:
            ax.add_collection3d(Poly3DCollection([face], color=color, alpha=alpha, edgecolor="k"))
        ax.text(
            np.mean(vertices[:, 0]),
            np.mean(vertices[:, 1]),
            np.mean(vertices[:, 2]),
            label,
            color=color,
        )

    # Assign colors and labels
    colors = ['red', 'blue', 'green', 'purple', 'orange']
    alpha_values = [0.4, 0.3, 0.2, 0.1, 0.05]

    for i, shape in enumerate(shapes):
        size = shape["size"]
        center = shape["center"]
        sides = shape["sides"]

        # Generate vertices dynamically
        vertices = create_shape_vertices(size, center, sides)

        # Calculate faces dynamically based on vertices and sides
        faces = calculate_faces(vertices, sides)

        # Plot shape
        color = colors[i % len(colors)]
        alpha = alpha_values[i % len(alpha_values)]
        plot_single_shape(ax, vertices, faces, color, alpha, label=f"Shape {i + 1}")

    # Set plot limits based on the largest shape
    max_size = max([s["size"] for s in shapes])
    ax.set_xlim(-max_size, max_size)
    ax.set_ylim(-max_size, max_size)
    ax.set_zlim(-max_size, max_size)
    ax.set_xlabel("X-axis")
    ax.set_ylabel("Y-axis")
    ax.set_zlabel("Z-axis")
    ax.set_title("Recursive Generalized Shapes (Dynamic Faces)")
    plt.show()


# Input seed and parameters
seed = {"size": 256, "center": (0, 0, 0), "sides": 4}  # Change sides to 3 for tetrahedron
recursion_depth = 4

# Generate shapes recursively
shapes = recursive_growth(seed, recursion_depth)

# Visualize the shapes with generalized face logic
plot_recursive_shapes_generalized(shapes)