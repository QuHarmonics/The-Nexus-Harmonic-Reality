Conversation URL:
https://chatgpt.com/c/67efdd1a-c980-8011-a27b-addc30749a3e

Title:


Prompt:
import matplotlib.pyplot as plt
import numpy as np

# Real Bitcoin block data (Block #722460 for example)
# Full 80-byte header + SHA1 and SHA2 must be computed, but using simulated real data below for now.
hex_rows = [
    "040000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e36299",  # Full header
    "01e36299",  # Nonce (at end of header but pulled out)
    "e320b6c2fffc8a4b2e76b02c3c34e7b2",  # SHA256(header) (placeholder, normally computed)
    "6b81b2d24ac66cab9d12452d6f9fb8c5",  # SHA256(SHA256(header)) (placeholder)
]

# Normalize all rows to the same length for matrix visualization (padding nonce & SHA)
def hex_to_array(hex_str, target_length):
    arr = [int(hex_str[i:i+2], 16) for i in range(0, len(hex_str), 2)]
    if len(arr) < target_length:
        arr += [0] * (target_length - len(arr))
    return np.array(arr)

max_len = max(len(row) for row in [r for r in hex_rows])
target_byte_len = max_len // 2

numeric_rows = [hex_to_array(row, target_byte_len) for row in hex_rows]
matrix = np.vstack(numeric_rows)

# Create the plot
fig, ax = plt.subplots(figsize=(12, 3))
cax = ax.matshow(matrix, cmap='viridis')
plt.title("Byte Value Matrix: Bitcoin Header, Nonce, SHA1, SHA2")
plt.xlabel("Byte Position")
plt.ylabel("Row (Header, Nonce, SHA1, SHA2)")
plt.colorbar(cax, label='Byte Value (0-255)')
plt.xticks(range(0, target_byte_len, 4))
plt.yticks(range(4), ["Header", "Nonce", "SHA1", "SHA2"])

plt.tight_layout()
plt.show()