Conversation URL:
https://chatgpt.com/c/674ada8e-7bdc-8011-a523-8cde7469bee8

Title:


Prompt:
import networkx as nx
import numpy as np
import matplotlib.pyplot as plt

# Simulating shared resources and interactions
num_nodes = 50  # Number of shared resource nodes
iterations = 100  # Iterations to observe changes
threshold = 0.35  # Threshold for harmonic alignment

# Initialize nodes with random resource values
resource_states = np.random.uniform(0, 1, num_nodes)
resource_interactions = np.zeros((num_nodes, num_nodes))

# Create a random graph representing interactions
G = nx.erdos_renyi_graph(num_nodes, 0.1, seed=42)
for edge in G.edges:
    resource_interactions[edge[0], edge[1]] = 1
    resource_interactions[edge[1], edge[0]] = 1

# Simulate resource alignment over iterations
alignment_history = []
for _ in range(iterations):
    new_states = resource_states.copy()
    for i in range(num_nodes):
        neighbors = np.where(resource_interactions[i] > 0)[0]
        if len(neighbors) > 0:
            avg_neighbor_state = np.mean(resource_states[neighbors])
            new_states[i] += 0.1 * (avg_neighbor_state - resource_states[i])  # Adjust toward neighbor average
    resource_states = np.clip(new_states, 0, 1)
    alignment_history.append(np.mean(np.abs(resource_states - threshold)))

# Visualize network with final resource states
plt.figure(figsize=(12, 8))
pos = nx.spring_layout(G, seed=42)
node_colors = resource_states
nx.draw(
    G,
    pos,
    node_color=node_colors,
    cmap=plt.cm.viridis,
    with_labels=False,
    node_size=100,
    edge_color='gray',
    alpha=0.7
)
plt.title("Shared Resource Network with Final Alignment States")
plt.colorbar(plt.cm.ScalarMappable(cmap=plt.cm.viridis), label="Resource Alignment with Threshold (0.35)")
plt.show()

# Visualize alignment history
plt.figure(figsize=(10, 6))
plt.plot(alignment_history, label="Alignment Over Iterations")
plt.axhline(threshold, color='red', linestyle='--', label="Target Threshold (0.35)")
plt.title("Harmonic Alignment Progress Over Time")
plt.xlabel("Iterations")
plt.ylabel("Mean Deviation from Threshold")
plt.legend()
plt.grid()
plt.show()