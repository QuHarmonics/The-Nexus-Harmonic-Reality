Conversation URL:
https://chatgpt.com/c/674ada8d-8fc8-8011-b56c-e5877bac1766

Title:


Prompt:
# Reinitialize analysis with proper variables and repeat necessary steps for all dimensions

import wave
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

# Load the audio file again
file_path = '/mnt/data/Early_Universe_Interference.wav'

# Open the audio file using wave module
with wave.open(file_path, 'r') as audio:
    # Extract audio parameters
    params = audio.getparams()
    n_channels, sampwidth, framerate, n_frames, comptype, compname = params[:6]
    
    # Read the audio frames
    audio_frames = audio.readframes(n_frames)

# Convert the audio frames to a NumPy array for analysis
audio_data = np.frombuffer(audio_frames, dtype=np.int16)

# Calculate the duration of the audio in seconds
duration = n_frames / framerate

# Generate time axis for the audio data
time = np.linspace(0, duration, len(audio_data))

# Detect pulses in the waveform
peaks, _ = find_peaks(audio_data, height=np.max(audio_data) * 0.5, distance=framerate / 20)  # Assuming 20 Hz pulse
pulse_times = peaks / framerate  # Convert peak indices to time in seconds
pulse_amplitudes = audio_data[peaks]  # Amplitudes at detected peaks

# Calculate pulse intervals and frequency
pulse_intervals = np.diff(pulse_times)
average_pulse_interval = np.mean(pulse_intervals)
pulse_frequency = 1 / average_pulse_interval

# Perform FFT for frequency analysis
fft_magnitude = np.abs(np.fft.rfft(audio_data))
fft_frequencies = np.fft.rfftfreq(len(audio_data), d=1/framerate)

# Identify prominent frequencies
prominent_frequencies = fft_frequencies[np.argsort(fft_magnitude)[-5:]][::-1]
prominent_magnitudes = np.sort(fft_magnitude)[-5:][::-1]

# Plot results across the three dimensions
fig = plt.figure(figsize=(15, 10))

# Time-Domain: Pulse Intervals
ax1 = fig.add_subplot(3, 1, 1)
ax1.plot(time, audio_data, color="blue", label="Audio Waveform")
ax1.scatter(pulse_times, pulse_amplitudes, color="red", label="Detected Pulses")
ax1.set_title("Time-Domain Analysis: Detected Pulses")
ax1.set_xlabel("Time (seconds)")
ax1.set_ylabel("Amplitude")
ax1.legend()

# Frequency-Domain: Frequency Spectrum
ax2 = fig.add_subplot(3, 1, 2)
ax2.plot(fft_frequencies, fft_magnitude, color="purple", label="Frequency Spectrum")
ax2.set_title("Frequency-Domain Analysis")
ax2.set_xlabel("Frequency (Hz)")
ax2.set_ylabel("Magnitude")
ax2.set_xlim(0, 100)
ax2.legend()
ax2.grid(True)

# Amplitude-Domain: Pulse Amplitudes Over Time
ax3 = fig.add_subplot(3, 1, 3)
ax3.bar(pulse_times, pulse_amplitudes, width=0.1, color="green", label="Pulse Amplitudes")
ax3.set_title("Amplitude-Domain Analysis: Pulse Amplitudes Over Time")
ax3.set_xlabel("Time (seconds)")
ax3.set_ylabel("Amplitude")
ax3.legend()

plt.tight_layout()
plt.show()

# Return metrics from the analysis
{
    "time_domain": {
        "pulse_times": pulse_times.tolist(),
        "average_interval": average_pulse_interval,
        "pulse_frequency": pulse_frequency,
    },
    "frequency_domain": {
        "dominant_frequencies": prominent_frequencies.tolist(),
        "magnitudes": prominent_magnitudes.tolist(),
    },
    "amplitude_domain": {
        "average_amplitude": np.mean(pulse_amplitudes),
        "amplitude_std_dev": np.std(pulse_amplitudes),
    },
}