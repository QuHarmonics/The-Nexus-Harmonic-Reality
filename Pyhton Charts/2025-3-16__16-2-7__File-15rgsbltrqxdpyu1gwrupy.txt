Conversation URL:
https://chatgpt.com/c/67cae028-273c-8011-acb0-380fae052b17

Title:


Prompt:
# Adjust segmentation to maximize bytes while keeping within 128 total bytes
# - 128 samples for 8-bit (8-digit bytes)
# - 64 samples for 16-bit (16-digit words)
# - 32 samples for 32-bit (32-digit words)

pi_bytes_8bit_full = [pi_digits_limited[i:i+8] for i in range(0, len(pi_digits_limited), 8)][:128]
pi_bytes_16bit_full = [pi_digits_limited[i:i+16] for i in range(0, len(pi_digits_limited), 16)][:64]
pi_bytes_32bit_full = [pi_digits_limited[i:i+32] for i in range(0, len(pi_digits_limited), 32)][:32]

# Create categorized data for each word length
odd_even_8bit_full = [categorize_byte(count_odd_even(byte)[0], count_odd_even(byte)[1]) for byte in pi_bytes_8bit_full]
odd_even_16bit_full = [categorize_byte(count_odd_even(byte)[0], count_odd_even(byte)[1]) for byte in pi_bytes_16bit_full]
odd_even_32bit_full = [categorize_byte(count_odd_even(byte)[0], count_odd_even(byte)[1]) for byte in pi_bytes_32bit_full]

# Create indices for bar positioning
indices_8bit = np.arange(128)
indices_16bit = np.arange(64) * 2  # Space them evenly within 128
indices_32bit = np.arange(32) * 4  # Space them evenly within 128

# Set up bar chart
plt.figure(figsize=(12, 6))

plt.bar(indices_8bit, odd_even_8bit_full, color="red", label="8-bit Bytes", alpha=0.7)
plt.bar(indices_16bit, odd_even_16bit_full, color="blue", label="16-bit Words", alpha=0.7, width=1.5)
plt.bar(indices_32bit, odd_even_32bit_full, color="green", label="32-bit Words", alpha=0.7, width=3)

plt.xlabel("Byte Index (128 Total)")
plt.ylabel("Dominance (1 = Odd-dominant, 0 = Even-dominant)")
plt.title("Odd vs. Even Dominance in Pi's 8-bit, 16-bit, and 32-bit Samples")
plt.legend()
plt.grid(axis="y", linestyle="--", alpha=0.5)

# Display the plot
plt.show()