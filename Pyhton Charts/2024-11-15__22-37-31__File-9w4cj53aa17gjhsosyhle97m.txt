Conversation URL:
https://chatgpt.com/c/674ada8d-7eec-8011-8c71-398f12a6c9d1

Title:


Prompt:
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import spectrogram

# Reload the audio data
sample_rate = 44100  # Samples per second
duration = 10  # Total duration in seconds

# Time vector
time = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)

# Regenerate the audio for visualization (same phases as before)
def big_bang(t):
    return np.sin(2 * np.pi * 440 * t) * np.exp(-t * 10)

def inflation(t):
    return np.sin(2 * np.pi * (440 + 2000 * t) * t) * np.exp(-t * 5)

def quark_gluon_plasma(t):
    noise = np.random.normal(0, 1, len(t))
    return noise * np.exp(-t * 2)

def particle_formation(t):
    return np.sin(2 * np.pi * 220 * t) * np.exp(-t * 1)

def nucleosynthesis(t):
    return np.sin(2 * np.pi * 110 * t) * np.exp(-t * 0.5)

# Combine phases for visualization
audio = np.zeros_like(time)
audio[:int(sample_rate * 1)] += big_bang(time[:int(sample_rate * 1)])
audio[int(sample_rate * 1):int(sample_rate * 3)] += inflation(time[:int(sample_rate * 2)])
audio[int(sample_rate * 3):int(sample_rate * 6)] += quark_gluon_plasma(time[:int(sample_rate * 3)])
audio[int(sample_rate * 6):int(sample_rate * 8)] += particle_formation(time[:int(sample_rate * 2)])
audio[int(sample_rate * 8):] += nucleosynthesis(time[:int(sample_rate * 2)])

# Spectrogram visualization
frequencies, times, spectrogram_data = spectrogram(audio, sample_rate)

plt.figure(figsize=(12, 6))
plt.imshow(10 * np.log10(spectrogram_data), aspect='auto', cmap='inferno', origin='lower',
           extent=[0, duration, frequencies[0], frequencies[-1]])
plt.colorbar(label='Intensity (dB)')
plt.title('Spectrogram of Cosmic Patterns')
plt.xlabel('Time (s)')
plt.ylabel('Frequency (Hz)')
plt.ylim(0, 5000)  # Focus on relevant frequencies
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()