Conversation URL:
https://chatgpt.com/c/67efdd1a-c980-8011-a27b-addc30749a3e

Title:


Prompt:
import hashlib

# Step 1: Full real Bitcoin header in hex (block #722460)
header_hex = (
    "040000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d61900"
    "00000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e8"
    "57233e0e61bc6649ffff001d01e36299"
)

# Step 2: Convert to bytes
header_bytes = bytes.fromhex(header_hex)

# Step 3: Perform SHA256 and double SHA256
sha1 = hashlib.sha256(header_bytes).digest()
sha2 = hashlib.sha256(sha1).digest()

# Step 4: Build hex rows now using real data
hex_rows = [
    header_hex,
    header_hex[-8:],                    # Nonce (last 4 bytes)
    sha1.hex(),
    sha2.hex(),
]

# Step 5: Normalize to same length
def hex_to_array(hex_str, target_length):
    arr = [int(hex_str[i:i+2], 16) for i in range(0, len(hex_str), 2)]
    if len(arr) < target_length:
        arr += [0] * (target_length - len(arr))
    return np.array(arr)

max_len = max(len(row) for row in hex_rows)
target_byte_len = max_len // 2
numeric_rows = [hex_to_array(row, target_byte_len) for row in hex_rows]
matrix = np.vstack(numeric_rows)

# Step 6: Plot it
fig, ax = plt.subplots(figsize=(12, 3))
cax = ax.matshow(matrix, cmap='viridis')
plt.title("Byte Value Matrix (Real Data): Bitcoin Header, Nonce, SHA1, SHA2")
plt.xlabel("Byte Position")
plt.ylabel("Row (Header, Nonce, SHA1, SHA2)")
plt.colorbar(cax, label='Byte Value (0-255)')
plt.xticks(range(0, target_byte_len, 4))
plt.yticks(range(4), ["Header", "Nonce", "SHA1", "SHA2"])

plt.tight_layout()
plt.show()