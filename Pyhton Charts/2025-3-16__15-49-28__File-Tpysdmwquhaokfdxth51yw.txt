Conversation URL:
https://chatgpt.com/c/67cae028-273c-8011-acb0-380fae052b17

Title:


Prompt:
# Ensure correct number of Pi digits for 128 bytes of 32-bit segments (4096 digits)
mp.dps = 4096 + 2  # Extra 2 for "3." at the start

# Get full Pi digits excluding "3."
pi_digits_full_32bit = str(mp.pi)[2:2 + 4096]

# Generate 128 bytes for 32-bit segmentation
pi_bytes_32bit_fixed = [pi_digits_full_32bit[i:i+32] for i in range(0, len(pi_digits_full_32bit), 32)][:128]

# Recreate table for 32-bit segments
byte_data_32bit_fixed = [{"Byte Index": i+1, "Pi Byte": byte, "Odd Count": count_odd_even(byte)[0], "Even Count": count_odd_even(byte)[1]} for i, byte in enumerate(pi_bytes_32bit_fixed)]

# Extract categorized data ensuring 128 values
odd_even_32bit_fixed = [categorize_byte(row["Odd Count"], row["Even Count"]) for row in byte_data_32bit_fixed]

# Plot data again with fully corrected 32-bit segmentation
plt.figure(figsize=(12, 6))

plt.plot(range(1, 129), odd_even_8bit, marker='o', linestyle='-', label="8-bit Bytes", alpha=0.7)
plt.plot(range(1, 129), odd_even_16bit, marker='s', linestyle='--', label="16-bit Bytes", alpha=0.7)
plt.plot(range(1, 129), odd_even_32bit_fixed, marker='d', linestyle='-.', label="32-bit Bytes", alpha=0.7)

plt.xlabel("Byte Index")
plt.ylabel("Dominance (1 = Odd-dominant, 0 = Even-dominant)")
plt.title("Odd vs. Even Dominance in Pi's 8-bit, 16-bit, and 32-bit Byte Segments")
plt.legend()
plt.grid(True)

# Display the plot
plt.show()