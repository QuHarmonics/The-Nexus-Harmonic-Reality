Conversation URL:
https://chatgpt.com/c/682b72fa-b7fc-8011-bfe6-d774ab0155b0

Title:


Prompt:
import numpy as np
import matplotlib.pyplot as plt
from math import floor
from hashlib import sha256
import pandas as pd

# Step 1: Generate SHA constants using cube roots of the first 64 primes
def sha_constants():
    primes = []
    num = 2
    while len(primes) < 64:
        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):
            primes.append(num)
        num += 1
    K = [floor((2**32) * (p ** (1/3) % 1)) for p in primes]
    return K

# Step 2: Compute forward ratios
def compute_ratios(K):
    Theta = [K[i + 1] / K[i] for i in range(len(K) - 1)]
    return Theta

# Step 3: Normalize by 3 (this effectively doesn't change the ratio, but retains formalism)
def normalize_ratios(K):
    normalized_ratios = [(K[i + 1] / 3) / (K[i] / 3) for i in range(len(K) - 1)]
    return normalized_ratios

# Step 4: Map to harmonic torque field (polar plot of ratios)
def plot_polar_ratios(ratios):
    angles = np.linspace(0, 2 * np.pi, len(ratios), endpoint=False)
    r = np.array(ratios)

    fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
    ax.plot(angles, r, marker='o', linestyle='-', color='teal')
    ax.set_title("SHA Constant Torque Ratios (Polar Harmonic Field)")
    plt.show()

# Step 5: Create a torque matrix
def torque_matrix(K, ratios):
    data = {
        'K[i]': K[:-1],
        'K[i+1]': K[1:],
        'Theta (K[i+1]/K[i])': ratios
    }
    return pd.DataFrame(data)

# Execute the process
K_values = sha_constants()
ratios = compute_ratios(K_values)
normalized_ratios = normalize_ratios(K_values)
torque_df = torque_matrix(K_values, ratios)

# Display matrix to user
import ace_tools as tools; tools.display_dataframe_to_user(name="SHA Torque Ratio Matrix", dataframe=torque_df)

# Plot polar field
plot_polar_ratios(ratios)