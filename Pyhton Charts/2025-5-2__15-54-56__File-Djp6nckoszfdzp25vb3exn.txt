Conversation URL:
https://chatgpt.com/c/68152107-e9dc-8011-981e-a28f7f145df5

Title:


Prompt:
import numpy as np
import matplotlib.pyplot as plt

# -------------------------
# 2D Neighbor-Averaging Simulation
# -------------------------
size2 = 50
timesteps = 50
H = 0.35

state2 = np.random.rand(size2, size2)
history2 = np.zeros((timesteps, size2, size2))

for t in range(timesteps):
    history2[t] = state2
    new_state2 = state2.copy()
    for i in range(size2):
        for j in range(size2):
            neighbors = (
                state2[(i - 1) % size2, j] +
                state2[(i + 1) % size2, j] +
                state2[i, (j - 1) % size2] +
                state2[i, (j + 1) % size2]
            )
            T = neighbors / 4
            new_state2[i, j] = state2[i, j] + H * (T - state2[i, j])
    state2 = new_state2

# Snapshot times
snapshots = [0, timesteps // 2, timesteps - 1]
for snap in snapshots:
    plt.figure()
    plt.imshow(history2[snap], aspect='equal')
    plt.title(f'2D Simulation Snapshot at Time {snap}')
    plt.xlabel('X Position')
    plt.ylabel('Y Position')
    plt.colorbar()

# -------------------------
# Batch H-Value Comparison (1D)
# -------------------------
size1 = 100
H_values = [0.1, 0.35, 0.9]

for H in H_values:
    # Initialize
    state1 = np.random.rand(size1)
    history1 = np.zeros((timesteps, size1))
    
    for t in range(timesteps):
        history1[t] = state1
        new_state1 = state1.copy()
        for i in range(size1):
            left = state1[(i - 1) % size1]
            right = state1[(i + 1) % size1]
            T = (left + right) / 2
            new_state1[i] = state1[i] + H * (T - state1[i])
        state1 = new_state1
    
    # Compute variance over time
    variance = np.var(history1, axis=1)
    plt.figure()
    plt.plot(range(timesteps), variance)
    plt.title(f'Variance Over Time (H = {H})')
    plt.xlabel('Time Step')
    plt.ylabel('Variance')

plt.show()