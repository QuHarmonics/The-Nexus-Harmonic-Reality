Conversation URL:
https://chatgpt.com/c/674ada8d-7990-8011-a5b4-1474d46314a2

Title:


Prompt:
# Recreate the expanded hurricane dataset with necessary hurricane data for testing
import pandas as pd
import numpy as np

# Define initial data for historical hurricanes and additional typhoons for expanded testing
expanded_hurricane_data = pd.DataFrame({
    "Name": ["Hurricane Katrina", "Hurricane Sandy", "Hurricane Andrew", "Hurricane Harvey", "Hurricane Maria",
             "Hurricane Irma", "Hurricane Dorian", "Typhoon Haiyan", "Cyclone Idai", "Hurricane Wilma"],
    "Pressure (hPa)": [902, 940, 922, 938, 908, 914, 910, 895, 920, 882],
    "Wind Speed (m/s)": [65, 55, 75, 60, 70, 80, 75, 90, 65, 85],
    "Rainfall (mm/h)": [100, 90, 120, 150, 130, 140, 120, 160, 110, 150],
    "Size Scale": [1.5, 2.0, 1.2, 1.8, 1.6, 1.8, 1.7, 2.0, 1.5, 1.6],
    "Expected Intensity": [70, 80, 60, 130, 110, 150, 130, 160, 120, 140]  # Hypothetical expected intensities
})

# Redefine the degradation adaptive model function with the dataset ready for application
def degradation_adaptive_model(pressure, wind_speed, rainfall, size_scale):
    """
    Enhanced model with a degradation metric that inverts macro accuracy as quantum influence increases.
    """
    # Calculate Degradation Metric: Strongest around the sweet spot, decays at extremes
    degradation_metric = np.exp(-10 * (size_scale - 0.35)**2)  # High near sweet spot, lower at extremes
    
    # Quantum Influence - Increased with degradation metric
    quantum_pressure_pull = np.exp(-pressure / 900) * (1 + degradation_metric)
    quantum_wind_energy = (wind_speed**1.5) / (1 + size_scale) * (1 + degradation_metric)
    quantum_rainfall_contribution = (rainfall / (1 + quantum_pressure_pull)) * (1 + degradation_metric)

    # Macro Influence - Decreased with degradation metric
    macro_pressure_pull = np.exp(-pressure / 920) * (1 - degradation_metric)
    macro_wind_energy = (wind_speed**1.8) / (1 + size_scale**1.3) * (1 - degradation_metric)
    macro_rainfall_contribution = (rainfall**1.2) / (1 + macro_pressure_pull) * (1 - degradation_metric)

    # Blended Components with Degradation Metric
    blended_pressure_pull = quantum_pressure_pull + macro_pressure_pull
    blended_wind_energy = quantum_wind_energy + macro_wind_energy
    blended_rainfall_contribution = quantum_rainfall_contribution + macro_rainfall_contribution

    # Adjusted size factor to accommodate degradation effect
    size_factor = size_scale**(1.3 + 0.1 * degradation_metric) / (1 + blended_wind_energy**(0.8 + 0.2 * degradation_metric))

    # Combined intensity estimate with degradation metric applied
    hurricane_intensity = blended_pressure_pull * blended_wind_energy * blended_rainfall_contribution * size_factor
    return hurricane_intensity

# Apply the degradation adaptive model to the dataset
expanded_hurricane_data["Degradation Adaptive Predicted Intensity"] = expanded_hurricane_data.apply(
    lambda row: degradation_adaptive_model(
        row["Pressure (hPa)"], row["Wind Speed (m/s)"], row["Rainfall (mm/h)"], row["Size Scale"]
    ),
    axis=1
)

# Calculate deviation with the degradation adaptive model
expanded_hurricane_data["Degradation Adaptive Intensity Deviation"] = (
    expanded_hurricane_data["Degradation Adaptive Predicted Intensity"] - expanded_hurricane_data["Expected Intensity"]
)

# Display results after applying the degradation adaptive model
import ace_tools as tools; tools.display_dataframe_to_user(name="Degradation Adaptive Hurricane Predictions", dataframe=expanded_hurricane_data)

# Visualize deviations with the degradation adaptive model
import matplotlib.pyplot as plt

plt.figure(figsize=(14, 8))
plt.bar(expanded_hurricane_data["Name"], expanded_hurricane_data["Degradation Adaptive Intensity Deviation"], color="purple")
plt.axhline(15, color="red", linestyle="--", label="Positive Threshold")
plt.axhline(-15, color="blue", linestyle="--", label="Negative Threshold")
plt.xlabel("Hurricane Name")
plt.ylabel("Degradation Adaptive Intensity Deviation")
plt.title("Prediction Accuracy with Degradation Adaptive Model for Hurricane Intensities")
plt.legend()
plt.grid()
plt.show()