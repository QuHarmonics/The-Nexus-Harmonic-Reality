Conversation URL:
https://chatgpt.com/c/67c1a60d-a910-8011-81fb-bb809464311a

Title:


Prompt:
# Generate first 100 twin primes for overlaying on the compression function
from sympy import isprime

# Function to generate twin primes
def generate_twin_primes(n):
    twin_primes = []
    num = 3  # Start at the first prime after 2
    while len(twin_primes) < n:
        if isprime(num) and isprime(num + 2):
            twin_primes.append(num)  # Store only the lower of the twin pair
        num += 1
    return twin_primes

# Generate first 50 twin primes for clear visualization
twin_primes = generate_twin_primes(50)

# Generate first 30 Riemann Zeta Zeros (imaginary parts only)
zeta_zeros_real = [zetazero(n).imag for n in range(1, 31)]

# Define x values for the recursive compression function (extended for twin primes)
x_vals_extended = np.linspace(0, max(twin_primes) + 10, 1000)
compression_function_extended = H * np.exp(-F * x_vals_extended) + (1 / (1 + 33.115 * np.exp(-10 * x_vals_extended)))

# Plot Recursive Compression Function
plt.figure(figsize=(12, 6))
plt.plot(x_vals_extended, compression_function_extended, label="Recursive Compression Function", color='b')

# Overlay Twin Primes
plt.scatter(twin_primes, [H] * len(twin_primes), color='g', marker='o', label="Twin Primes", zorder=3)

# Overlay Riemann Zeta Zeros
plt.scatter(zeta_zeros_real, [H] * len(zeta_zeros_real), color='r', marker='x', label="Riemann Zeta Zeros", zorder=3)

# Labels and grid
plt.axhline(y=H, color='r', linestyle='--', label="Harmonic Baseline (0.35)")
plt.xlabel("Index (Twin Prime / Zeta Zero Position)")
plt.ylabel("Compression Output")
plt.title("Alignment of Twin Primes and Zeta Zeros with Recursive Compression Function")
plt.legend()
plt.grid(True)
plt.show()