Conversation URL:
https://chatgpt.com/c/6816cf39-2488-8011-9bc9-cdef65fffe4a

Title:


Prompt:
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

# Setting up parameters
alpha = 0.3
beta = 0.3
gamma = 0.3
num_steps = 100
num_engines = 3

# Initial scar states for the three engines
scars = np.array([1, 4, 7])  # Example initial states for S1, S2, S3

# Function to compute scar updates
def scar_exchange(scar1, scar2, scar3, alpha, beta, gamma):
    return alpha * scar1 + beta * scar2 + gamma * scar3

# Simulate the evolution of the system
scar_history = np.zeros((num_steps, num_engines))
scar_history[0] = scars

for t in range(1, num_steps):
    # All-to-all scar exchange step (simple weighted sum)
    scar_history[t, 0] = scar_exchange(scar_history[t-1, 0], scar_history[t-1, 1], scar_history[t-1, 2], alpha, beta, gamma)
    scar_history[t, 1] = scar_exchange(scar_history[t-1, 0], scar_history[t-1, 1], scar_history[t-1, 2], alpha, beta, gamma)
    scar_history[t, 2] = scar_exchange(scar_history[t-1, 0], scar_history[t-1, 1], scar_history[t-1, 2], alpha, beta, gamma)

# Create a 3D plot to visualize the convergence
fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')

# Animation function to update the plot
def update(frame):
    ax.clear()
    ax.plot(scar_history[:frame, 0], scar_history[:frame, 1], scar_history[:frame, 2], color='b', marker='o')
    ax.set_title(f'Scar Evolution at Step {frame}')
    ax.set_xlabel('Engine 1')
    ax.set_ylabel('Engine 2')
    ax.set_zlabel('Engine 3')
    ax.set_xlim(min(scar_history[:, 0]), max(scar_history[:, 0]))
    ax.set_ylim(min(scar_history[:, 1]), max(scar_history[:, 1]))
    ax.set_zlim(min(scar_history[:, 2]), max(scar_history[:, 2]))

# Set up the animation
ani = FuncAnimation(fig, update, frames=num_steps, interval=50, repeat=False)

# Show the plot
plt.show()