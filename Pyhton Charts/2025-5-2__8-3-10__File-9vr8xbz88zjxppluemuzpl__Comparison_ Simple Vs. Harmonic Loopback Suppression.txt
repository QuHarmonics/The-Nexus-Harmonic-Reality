Conversation URL:
https://chatgpt.com/c/6814a123-a51c-8011-a87a-fa6707246c06

Title:
Comparison: Simple vs. Harmonic Loopback Suppression

Prompt:
import numpy as np
import matplotlib.pyplot as plt

# ── Harmonic Loopback vs. Simple Suppression Demo ────────────────────────────

# Physical constants
G    = 6.67430e-11        # m^3·kg⁻¹·s⁻²
hbar = 1.054571817e-34    # J·s
c    = 299792458          # m/s

# Nexus3 parameters
phi = 1.618               # golden fold constant
A   = 1.0                 # effective interaction surface (m^2)
k   = 1e-5                # tuning constant for entangled energy

# Mass pair: Earth & Sun
m1 = 5.97219e24           # kg
m2 = 1.9885e30            # kg
m_sum = m1 + m2

# Compute critical radius
r_c = np.sqrt(G * m1 * m2 / (hbar * c))

# Casimir pressure function (parallel plates)
def sigma(r):
    return np.pi**2 * hbar * c / (240 * r**4)

# Entangled energy model
def E_entangled(r):
    return k * (m_sum * phi) * (sigma(r) * A)**0.35

# Loopback force ratio for harmonic model
def suppression_harmonic(r):
    # ΔE between macro and entangled energies
    dE = m_sum * c**2 - E_entangled(r)
    # Newtonian force equivalent
    G_newton = G * m1 * m2 / r**2
    # G_loop/G_Newton
    return (dE / G_newton) * np.exp(-dE / (hbar * c))

# Simple suppression (ΔE = Gm1m2/r^2)
def suppression_simple(r):
    deltaE_simple = G * m1 * m2 / r**2
    return np.exp(-deltaE_simple / (hbar * c))

# Plot both curves vs. scaled radius r/r_c
r_rel = np.logspace(-2, 2, 300)
r = r_rel * r_c

plt.figure(figsize=(8, 5))
plt.semilogx(r_rel, suppression_simple(r), label="Simple ΔE=Gm₁m₂/r²", linestyle='--')
plt.semilogx(r_rel, suppression_harmonic(r), label="Harmonic ΔE from E_entangled", alpha=0.8)
plt.axhline(0.5, color='gray', linestyle=':', label='50% Suppression')
plt.xlabel("r / r_c")
plt.ylabel("G_loop / G_Newton")
plt.title("Comparison: Simple vs. Harmonic Loopback Suppression")
plt.legend()
plt.grid(True, which="both", ls="--", alpha=0.5)
plt.tight_layout()
plt.show()