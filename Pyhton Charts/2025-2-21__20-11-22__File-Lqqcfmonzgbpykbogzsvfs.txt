Conversation URL:
https://chatgpt.com/c/67b6f214-dd30-8011-aefd-9439df008548

Title:


Prompt:
# SHA-256 Recursive Hashing Analysis

# SHA-256 hashes of "hello" across multiple iterations
sha256_hello_1 = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824"  # "hello" hash
sha256_hello_2 = "d7914fe546b684688bb95f4f888a92dfc680603a75f23eb823658031fff766d9"  # Rehashed once
sha256_hello_3 = "ecd26292b7f02970ca6909abb23e1aedd0dd57d0ee9ff40bf3f30c325e3e453a"  # Rehashed twice

# Convert the SHA-256 hex strings into bytes
sha256_hello_1_bytes = bytes.fromhex(sha256_hello_1)
sha256_hello_2_bytes = bytes.fromhex(sha256_hello_2)
sha256_hello_3_bytes = bytes.fromhex(sha256_hello_3)

# Byte frequency analysis for each iteration
byte_frequencies_hello_1 = Counter(sha256_hello_1_bytes)
byte_frequencies_hello_2 = Counter(sha256_hello_2_bytes)
byte_frequencies_hello_3 = Counter(sha256_hello_3_bytes)

# Sort byte frequencies for visualization
sorted_bytes_1 = sorted(byte_frequencies_hello_1.keys())
sorted_frequencies_1 = [byte_frequencies_hello_1[b] for b in sorted_bytes_1]

sorted_bytes_2 = sorted(byte_frequencies_hello_2.keys())
sorted_frequencies_2 = [byte_frequencies_hello_2[b] for b in sorted_bytes_2]

sorted_bytes_3 = sorted(byte_frequencies_hello_3.keys())
sorted_frequencies_3 = [byte_frequencies_hello_3[b] for b in sorted_bytes_3]

# Plot frequency distributions for each iteration
fig, axes = plt.subplots(3, 1, figsize=(12, 15))

axes[0].bar(sorted_bytes_1, sorted_frequencies_1, color='blue', alpha=0.7)
axes[0].set_title("Byte Frequency of SHA-256 Output ('hello' - 1st Hash)")
axes[0].set_xlabel("Byte Value (0-255)")
axes[0].set_ylabel("Frequency")

axes[1].bar(sorted_bytes_2, sorted_frequencies_2, color='red', alpha=0.7)
axes[1].set_title("Byte Frequency of SHA-256 Output (Rehashed Once)")
axes[1].set_xlabel("Byte Value (0-255)")
axes[1].set_ylabel("Frequency")

axes[2].bar(sorted_bytes_3, sorted_frequencies_3, color='green', alpha=0.7)
axes[2].set_title("Byte Frequency of SHA-256 Output (Rehashed Twice)")
axes[2].set_xlabel("Byte Value (0-255)")
axes[2].set_ylabel("Frequency")

plt.tight_layout()
plt.show()

# Calculate entropy for each iteration
entropy_hello_1 = -sum((freq / len(sha256_hello_1_bytes)) * np.log2(freq / len(sha256_hello_1_bytes))
                       for freq in byte_frequencies_hello_1.values())
entropy_hello_2 = -sum((freq / len(sha256_hello_2_bytes)) * np.log2(freq / len(sha256_hello_2_bytes))
                       for freq in byte_frequencies_hello_2.values())
entropy_hello_3 = -sum((freq / len(sha256_hello_3_bytes)) * np.log2(freq / len(sha256_hello_3_bytes))
                       for freq in byte_frequencies_hello_3.values())

entropy_hello_1, entropy_hello_2, entropy_hello_3