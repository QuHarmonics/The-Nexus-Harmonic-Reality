Conversation URL:
https://chatgpt.com/c/679297ab-7814-8011-953e-78ffd525d657

Title:


Prompt:
# Step 1: Recursive Wave Interaction
# Using the combined lattice as input to generate new forward and mirrored lattices iteratively.

# Define a function to calculate forward and mirrored lattices from a combined lattice
def recursive_lattices(Z_combined, iterations=5):
    results = []
    current_lattice = Z_combined
    for i in range(iterations):
        # Generate forward and mirrored lattices
        forward_lattice = np.abs(current_lattice)
        mirrored_lattice = -np.abs(current_lattice)
        # Combine to form the next lattice
        combined_lattice = forward_lattice + mirrored_lattice
        results.append((forward_lattice, mirrored_lattice, combined_lattice))
        current_lattice = combined_lattice
    return results

# Generate recursive lattices
iterations = 5
recursive_results = recursive_lattices(Z_combined, iterations=iterations)

# Step 2: Time Evolution and Visualization
fig, axes = plt.subplots(iterations, 3, figsize=(18, 5 * iterations), subplot_kw={"projection": "3d"})
fig.suptitle("Recursive Wave Evolution Across Iterations", fontsize=16, y=0.92)

for i, (forward, mirrored, combined) in enumerate(recursive_results):
    # Plot Forward Lattice
    ax = axes[i, 0]
    ax.plot_surface(X, Y, forward, cmap="plasma", edgecolor="none")
    ax.set_title(f"Iteration {i + 1}: Forward Lattice")
    ax.set_xlabel("X Axis (Index)")
    ax.set_ylabel("Y Axis (Index)")
    ax.set_zlabel("Amplitude")

    # Plot Mirrored Lattice
    ax = axes[i, 1]
    ax.plot_surface(X, Y, mirrored, cmap="viridis", edgecolor="none")
    ax.set_title(f"Iteration {i + 1}: Mirrored Lattice")
    ax.set_xlabel("X Axis (Index)")
    ax.set_ylabel("Y Axis (Index)")
    ax.set_zlabel("Amplitude")

    # Plot Combined Lattice
    ax = axes[i, 2]
    ax.plot_surface(X, Y, combined, cmap="coolwarm", edgecolor="none")
    ax.set_title(f"Iteration {i + 1}: Combined Lattice")
    ax.set_xlabel("X Axis (Index)")
    ax.set_ylabel("Y Axis (Index)")
    ax.set_zlabel("Amplitude")

plt.tight_layout()
plt.show()

# Step 3: Entropy and Energy Analysis
# Define a function to calculate entropy and energy of a lattice
def lattice_entropy_energy(Z):
    entropy = -np.sum(Z * np.log(np.abs(Z) + 1e-10))  # Entropy-like measure
    energy = np.sum(np.abs(Z))  # Sum of amplitudes as energy measure
    return entropy, energy

# Analyze entropy and energy for each iteration
entropy_energy_results = [
    (lattice_entropy_energy(forward), lattice_entropy_energy(mirrored), lattice_entropy_energy(combined))
    for forward, mirrored, combined in recursive_results
]

# Display results
import pandas as pd
results_df = pd.DataFrame([
    {
        "Iteration": i + 1,
        "Forward Entropy": e_f[0],
        "Forward Energy": e_f[1],
        "Mirrored Entropy": e_m[0],
        "Mirrored Energy": e_m[1],
        "Combined Entropy": e_c[0],
        "Combined Energy": e_c[1],
    }
    for i, (e_f, e_m, e_c) in enumerate(entropy_energy_results)
])
import ace_tools as tools; tools.display_dataframe_to_user(name="Recursive Lattice Entropy and Energy Analysis", dataframe=results_df)