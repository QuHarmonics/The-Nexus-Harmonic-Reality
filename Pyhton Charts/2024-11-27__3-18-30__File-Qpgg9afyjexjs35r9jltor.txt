Conversation URL:
https://chatgpt.com/c/674ada8e-7bdc-8011-a523-8cde7469bee8

Title:


Prompt:
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

# Define the rink dimensions (NHL standard: 200ft x 85ft)
rink_length = 200  # feet
rink_width = 85  # feet
corner_radius = 28  # feet

# Conversion factor: 1 foot = 0.3048 meters
feet_to_meters = 0.3048
rink_length_m = rink_length * feet_to_meters
rink_width_m = rink_width * feet_to_meters
corner_radius_m = corner_radius * feet_to_meters

# Define the center and blue line locations (relative to the length)
center_line_x = rink_length_m / 2
blue_line_x = center_line_x / 3

# Define the 3D ice rink plot
def draw_ice_rink():
    fig = plt.figure(figsize=(10, 6))
    ax = fig.add_subplot(111, projection='3d')
    
    # Ice surface
    x = np.linspace(-center_line_x, center_line_x, 100)
    y = np.linspace(-rink_width_m / 2, rink_width_m / 2, 50)
    X, Y = np.meshgrid(x, y)
    Z = np.zeros_like(X)  # Flat surface for ice
    ax.plot_surface(X, Y, Z, color='lightblue', alpha=0.9, edgecolor='none')
    
    # Center line (red)
    ax.plot([0, 0], [-rink_width_m / 2, rink_width_m / 2], [0, 0], color='red', linewidth=3)
    
    # Blue lines
    ax.plot([-blue_line_x, -blue_line_x], [-rink_width_m / 2, rink_width_m / 2], [0, 0], color='blue', linewidth=3)
    ax.plot([blue_line_x, blue_line_x], [-rink_width_m / 2, rink_width_m / 2], [0, 0], color='blue', linewidth=3)
    
    # Face-off circles (center and zones)
    faceoff_radius_m = 15 * feet_to_meters
    for x_center in [0, -blue_line_x, blue_line_x]:
        for y_center in [-rink_width_m / 4, rink_width_m / 4]:
            t = np.linspace(0, 2 * np.pi, 100)
            ax.plot(x_center + faceoff_radius_m * np.cos(t),
                    y_center + faceoff_radius_m * np.sin(t),
                    [0] * len(t), color='red', linewidth=2)
    
    # Goal crease (blue semicircles)
    goal_radius_m = 6 * feet_to_meters
    goal_offset_x = center_line_x - 11 * feet_to_meters  # Distance from end boards to goal line
    for x_goal in [-goal_offset_x, goal_offset_x]:
        t = np.linspace(-np.pi / 2, np.pi / 2, 100)
        ax.plot(x_goal + goal_radius_m * np.cos(t),
                goal_radius_m * np.sin(t),
                [0] * len(t), color='blue', linewidth=2)
    
    # Set axes limits
    ax.set_xlim([-center_line_x, center_line_x])
    ax.set_ylim([-rink_width_m / 2, rink_width_m / 2])
    ax.set_zlim([0, 5])  # Ice is flat; small Z for perspective
    
    # Axes labels
    ax.set_title("3D Ice Rink Rendering")
    ax.set_xlabel("Length (m)")
    ax.set_ylabel("Width (m)")
    ax.set_zlabel("Height (m)")
    
    plt.show()

# Render the 3D ice rink
draw_ice_rink()