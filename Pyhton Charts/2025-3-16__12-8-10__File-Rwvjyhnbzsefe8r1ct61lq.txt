Conversation URL:
https://chatgpt.com/c/67d65bbe-894c-8011-a014-0ae1ad66087d

Title:


Prompt:
# Reduce Pi precision to 100,000 digits to improve efficiency
mp.dps = 100000  # Set precision to 100,000 digits
pi_str = str(mp.pi)[2:]  # Remove "3." from the beginning

# Count even and odd digits per byte (8-digit groups)
pi_bytes = [pi_str[i:i+8] for i in range(0, len(pi_str), 8)]
even_odd_counts = [{'Byte Index': i+1,
                    'Even Count': sum(1 for d in byte if int(d) % 2 == 0),
                    'Odd Count': sum(1 for d in byte if int(d) % 2 == 1)}
                   for i, byte in enumerate(pi_bytes[:12500])]  # First 100,000 digits (12,500 bytes)

# Convert to DataFrame
pi_even_odd_df = pd.DataFrame(even_odd_counts)

# Display even-odd balance analysis
import ace_tools as tools
tools.display_dataframe_to_user(name="Pi Even-Odd Balance Analysis (100K Digits)", dataframe=pi_even_odd_df)

# 2. Overlay Piâ€™s pinwheel with twin prime gaps
pi_byte_ratios = pi_even_odd_df['Odd Count'] / pi_even_odd_df['Even Count']

plt.figure(figsize=(10, 5))
plt.plot(pi_even_odd_df['Byte Index'], pi_byte_ratios, marker='o', linestyle='-', label="Pi Even-Odd Ratio", color='blue')
plt.xlabel("Pi Byte Index")
plt.ylabel("Odd/Even Ratio")
plt.title("Pi Even-Odd Ratio Over 100,000 Digits")
plt.legend()
plt.grid(True)
plt.show()

# 3. Attempt to derive a recursive "Pi Pinwheel" function based on its structure
# We'll analyze whether the even-odd balance follows a predictable harmonic pattern
pi_harmonic_shifts = pi_even_odd_df['Even Count'].diff().fillna(0)

# Display Pi's harmonic shift structure
pi_harmonic_df = pd.DataFrame({
    'Byte Index': pi_even_odd_df['Byte Index'],
    'Even Count': pi_even_odd_df['Even Count'],
    'Odd Count': pi_even_odd_df['Odd Count'],
    'Harmonic Shift': pi_harmonic_shifts
})

tools.display_dataframe_to_user(name="Pi Harmonic Shift Structure (100K Digits)", dataframe=pi_harmonic_df)

# Plot Pi's harmonic shift structure
plt.figure(figsize=(10, 5))
plt.plot(pi_harmonic_df['Byte Index'], pi_harmonic_df['Harmonic Shift'], marker='x', linestyle='-', color='red', label="Harmonic Shift")
plt.xlabel("Pi Byte Index")
plt.ylabel("Harmonic Shift")
plt.title("Pi Harmonic Shift Over 100,000 Digits")
plt.legend()
plt.grid(True)
plt.show()