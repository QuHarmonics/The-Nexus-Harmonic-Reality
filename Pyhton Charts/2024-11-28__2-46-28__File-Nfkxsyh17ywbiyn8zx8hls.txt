Conversation URL:
https://chatgpt.com/c/67481f57-fa58-8011-8138-d0ffa7d21eb5

Title:


Prompt:
# Correcting lengths of lists to ensure they all match 50 iterations
iterations = 50
task_loads = []
feedbacks = []
growths = []

# Simulate over the iterations
for i in range(iterations):
    # Task Distribution (store task loads for each iteration)
    task_loads.append(task_distribution(workloads[:i+1], capacities[:i+1])[0])  # Store only the first value for simplicity
    
    # Reflective Feedback
    deviation = np.random.normal(0, 0.1)
    current_feedback = reflective_feedback(current_feedback, deviation)
    feedbacks.append(current_feedback)
    
    # Harmonic Growth
    influence = np.random.rand()
    resistance = np.random.rand()
    current_growth = harmonic_growth(current_growth, influence, resistance)
    growths.append(current_growth)

# Convert lists to numpy arrays for consistency
task_loads = np.array(task_loads)
feedbacks = np.array(feedbacks)
growths = np.array(growths)

# Plot the results of the Genesis Seed simulation
fig, ax = plt.subplots(3, 1, figsize=(10, 15))

# Plot Task Loads
ax[0].plot(np.arange(iterations), task_loads, label="Task Loads")
ax[0].set_title('Task Distribution Over Iterations')
ax[0].set_xlabel('Iteration')
ax[0].set_ylabel('Task Load')
ax[0].legend()

# Plot Feedback
ax[1].plot(np.arange(iterations), feedbacks, label="Feedback")
ax[1].set_title('Reflective Feedback Over Iterations')
ax[1].set_xlabel('Iteration')
ax[1].set_ylabel('Feedback')
ax[1].legend()

# Plot Growth
ax[2].plot(np.arange(iterations), growths, label="Harmonic Growth")
ax[2].set_title('Harmonic Growth Over Iterations')
ax[2].set_xlabel('Iteration')
ax[2].set_ylabel('Growth')
ax[2].legend()

plt.tight_layout()
plt.show()